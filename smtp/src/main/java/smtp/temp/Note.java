package smtp.temp;

public class Note {

  /*
      smtp 使用端口25
   */

  /*
   *
      <CRLF> ---> 回车
      <SP> ---> 空格
   */

  /*
      用户 用户名的最大长度是64个字节。
      域 域的最大长度是64个字符
      路径 回复路径和转发路径的最大长度是256个字符
      命令行 命令行的最大长度，包括回车符为512个字符
      应答行 应答行的最大长度，包括回车符为512个字符
      文本行 文本行的最大长度，包括回车符和为透明性增加的字符不得超过1000个字符
      接收缓冲区 接收缓冲区最多可以容纳100个接收者
      如果出错，应答如下：
      500 行过长
      501 路径过多
      552 接收者过多
      552 邮件内容过多

   */

  /*
      应答码构成方法
　　三位的应答码每一位都有特定的意义。每一位应答表示是否是成功的，失败的或未完成的。通过这一位，不复杂的SMTP发送就可以决定下一步的操作，如果发送方希望大概了解究竟出了什么问题，它可以检测第二位，而第三位则保存了最后更完整的信息。也就是说，从第一位到第三位，接收方可以一步比一步精确地确定接收方的状态。对于第一位有五种可能的表示代表不同的意义：
　　1yz 部分完成应答
　　命令被接受，但是要求的操作被中止，原因在应答码中。发送方应该再次发送另一命令指明是否继续操作，或者放弃操作。

　　2yz 全部完成应答
　　要求的操作已经完成，可以开始另一个新的请求。

　　3yz 需要近一步信息的部分完成应答
　　命令被接受，但是要求的操作被中止，需要接收进一步的信息。发送方应该发送另一条命令指明进一步的信息。

　　4yz 暂时未完成应答
　　命令未被接受，要求的操作也未执行，但是发生错误的状态是暂时的，可以再一次请求操作。发送者应该返回命令序列的开始命令（如果有的话）。很难解释这个暂时的意义，特别对于两个不同的站点来说。区别应答是属于些类还是下一类的方法是：如果能够不加任何改变地重复的再一次发送命令，就是本类的，如果不是，就是下一类（5yz）的。

　　5yz 永久未完成应答
　　命令未被接受，要求的操作未完成。发送对命令的重复不起作用。即使一些出错条件已经改变，但是用户已经不希望重试，而希望在未来的某个时间再进行操作。

　　应答的第二位的意义有以下几类：

    x0z 语法：此类型的应答是针对以下情况的：语法错误；符合语法但命令不存在功能；未完成或冗余的命令。

    x1z 信息：此类型的应答是用于请求信息的，如状态或帮助信息。

    x2z 连接：此类型的应答是关于传输信道的。

    x3z 未使用。

    x4z 未使用。

    x5z 邮件系统：此类型的应答指明接收方邮件系统关于请求传送或其它操作的状态的
   */

  /*
   *  应答文本可能多于一行；在此情况下，文本必须被标记，接收文本的一方才不致于少读入一行数据。这要求特定的格式说明多行应答。此格式是：每一行，除了最后一行外，都以应答码加一个"-"开始。而最后一行以应答码加空格<SP>开始。如下例：

      123-First line
      123-Second line
      123-234 text beginning with numbers
      123 The last line
   */

  /*
   * 常用邮件头：
   * Return-Path
   * Received
   * Date
   * From
   * Subject
   * Sender
   * To
   * Cc
   * X-Mailer 发信客户端
   *
   * Mime-Version 用来指定Mime的version
   * Content-Type
   * Content-Transfer-Encoding , 方式有 7bit, 8bit, binary, quoted-printable, base64, ietf-token, x-token
   * Content-ID
   * Content-Description
   *
   */


}
